#include <bits/stdc++.h>
using namespace std;

int getIthBit(int number, int idx){
    //    if((1<<idx)>number) return -1;
    // 11101
    // 00100
    if (((1<<idx)&number) == 0 ) return 0;
    else return 1;
}

int setIthBit(int num, int idx){ 
    // 11001
    // 00100 (this is mask generated by left shift times idx)  then logical or is taken
    return num | (1<<idx);
}    

int clearIthBit(int num, int idx){
    // 11001
    // 01000 << Mask for clearing bit
    // 10111 << We will invert this mask and then do bitwise and
    
    return num & (~(1 << idx)); 
}

int clearRangeOfBits(int num, int l, int r){
    /*
        100101101
        XXXX10000 => 
        XXXXX1111 => subtract 1 from 1<<(l-r+1) 
        000111100 => left shift r times
        111000011 => invert it to create mask
    */

    int a = (~0) << (r+1);
    int b = (1<<l) -1;
    int mask = a|b;
    return mask & num; 
}

int replaceBits(int num, int replacement, int i, int j){
    /*
        10011100
        replace 10001 from range 1,5
        XX10001X
    */
    int temp = clearRangeOfBits(num,i,j);
    int mask = replacement<<i;
    return temp | mask;
}
int main(){

    // int k;
    int num;
    // cin>>k;
    cin>>num;
    int repl; cin>>repl;
    int i,j;
    cin>>i>>j;
    // cout<<getIthBit(k,idx)<<endl;
    // cout<<setIthBit(k,idx)<<endl;
    // cout<<clearRangeOfBits(num,i,j)<<endl;
    cout<<replaceBits(num,repl,i,j)<<endl;
    // cin >> k;
    // cin >> idx;

    // cout<< clearIthBit(k,idx)<<endl;

    return 0;
}